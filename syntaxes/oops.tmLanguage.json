{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "oops",
	"patterns": [
		{
			"include": "#root"
		}
	],
	"repository": {
		"root": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#imports"
				},
				{
					"include": "#classes"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.oops",
					"match": "\\b(break|case|catch|continue|default|do|else|finally|for|goto|instanceof|if|return|switch|throw|try|using|while)\\b"
				},
				{
					"name": "keyword.control.import.oops",
					"match": "\\b(import)\\b"
				}
			]
		},
		"storages": {
			"patterns": [
				{
					"name": "storage.type.class.oops",
					"match": "\\b(class|enum|interface)\\b"
				},
				{
					"name": "storage.type.function.oops",
					"match": "\\b(def|get|set|operator)\\b"
				},
				{
					"name": "storage.type.method.oops",
					"match": "\\b(def|get|set|operator)\\b"
				},
				{
					"include": "#primitives"
				},
				{
					"name": "storage.modifier.access.oops",
					"match": "\\b(intrinsic|native|package|private|protected|public)\\b"
				},
				{
					"name": "storage.modifier.variable.oops",
					"match": "\\b(final|static)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.oops",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.oops",
					"match": "\\\\."
				}
			]
		},
		"chars": {
			"name": "string.quoted.single.oops",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.oops",
					"match": "\\\\."
				}
			]
		},
		"patched": {
			"patterns": [
				{
					"name": "variable.language.this.oops",
					"match": "\\bthis\\b"
				},
				{
					"name": "variable.language.super.oops",
					"match": "\\bsuper\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.true.oops",
					"match": "\\b(true)\\b"
				},
				{
					"name": "constant.language.false.oops",
					"match": "\\b(false)\\b"
				},
				{
					"name": "constant.language.null.oops",
					"match": "\\b(null)\\b"
				},
				{
					"name": "constant.numeric.integer.decimal.oops",
					"match": "\\b(0)\\b"
				},
				{
					"name": "constant.numeric.integer.decimal.oops",
					"match": "\\b([\\-+]?[1-9]\\d*(?:i?))\\b"
				},
				{
					"name": "constant.numeric.integer.binary.oops",
					"match": "\\b([\\-+]?0b[01]+(?:i?))\\b"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.oops",
					"match": "\\b([\\-+]?0x[0-9a-fA-F]+(?:i?))\\b"
				},
				{
					"name": "constant.numeric.float.oops",
					"match": "\\b([\\-+]?\\d+[eE][\\-+]?\\d+[dDfF]?)\\b"
				},
				{
					"name": "constant.numeric.float.oops",
					"match": "\\b([\\-+]?\\d+\\.\\d+[dDfF]?)\\b"
				},
				{
					"name": "constant.numeric.float.oops",
					"match": "\\b([\\-+]?\\d+\\.\\d+[eE][\\-+]?\\d+[dDfF]?)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.oops",
					"match": "\\/\\/.*$"
				},
				{
					"name": "comment.block.oops",
					"begin": "\\/\\*",
					"end": "\\*\\/"
				}
			]
		},
		"primitives": {
			"patterns": [
				{
					"name": "storage.type.primitive.oops",
					"match": "\\b(boolean|byte|short|int|float|long|double)(?:\\s*\\[])?\\b"
				}
			]
		},
		"validType": {
			"patterns": [
				{
					"include": "#primitives"
				},
				{
					"match": "(void|auto)",
					"name": "invalid.illegal.oops"
				},
				{
					"include": "#reifiedType"
				},
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*\\[])?",
					"name": "entity.name.class.oops"
				}
			]
		},
		"classType": {
			"patterns": [
				{
					"match": "(void|auto|boolean|byte|short|int|float|long|double)",
					"name": "invalid.illegal.oops"
				},
				{
					"include": "#reifiedType"
				},
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*\\[])?",
					"name": "entity.name.class.oops"
				}
			]
		},
		"reifiedType": {
			"begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*<",
			"end": ">(?:\\s*\\[])?",
			"name": "meta.generic.reified.oops",
			"beginCaptures": {
				"1": {
					"name": "entity.name.class.oops"
				}
			},
			"patterns": [
				{
					"include": "#validType"
				}
			]
		},
		"typeDecl": {
			"patterns": [
				{
					"begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s+(extends|super)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*<",
					"end": ">",
					"name": "meta.type.bound.generic.oops",
					"patterns": [
						{
							"include": "#validType"
						}
					],
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.oops"
						},
						"2": {
							"name": "storage.modifier.bound.oops"
						},
						"3": {
							"patterns": [
								{
									"include": "#classType"
								}
							]
						}
					}
				},
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s+(extends|super)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
					"name": "meta.type.bound.nongeneric.oops",
					"captures": {
						"1": {
							"name": "entity.name.type.oops"
						},
						"2": {
							"name": "storage.modifier.bound.oops"
						},
						"3": {
							"patterns": [
								{
									"include": "#classType"
								}
							]
						}
					}
				},
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "entity.name.type.oops"
				}
			]
		},
		"imports": {
			"match": "(import)\\s+([a-zA-Z_][a-zA-Z0-9_]*\\.)*([a-zA-Z_][a-zA-Z0-9_]*)",
			"name": "meta.import.oops",
			"captures": {
				"1": {
					"name": "keyword.control.import.oops"
				},
				"3": {
					"name": "entity.name.class.oops"
				}
			}
		},
		"classes": {
			"patterns": [
				{
					"begin": "(?:(final)\\s+)?(class|interface)\\s+",
					"end": "}",
					"name": "meta.class.oops",
					"patterns": [
						{
							"begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*<",
							"end": ">",
							"name": "meta.class.name.oops",
							"beginCaptures": {
								"1": {
									"name": "entity.name.class.oops"
								}
							},
							"patterns": [
								{
									"include": "#typeDecl"
								}
							]
						},
						{
							"begin": "(extends)\\s*",
							"end": "\\s*(?=implements|{)",
							"name": "meta.class.super.name.oops",
							"patterns": [
								{
									"include": "#classType",
									"name": "entity.other.inherited-class.oops"
								}
							],
							"beginCaptures": {
								"1": {
									"name": "keyword.control.extends.oops"
								}
							}
						},
						{
							"begin": "(implements)\\s*",
							"end": "(?={)",
							"name": "meta.interface.super.name.oops",
							"patterns": [
								{
									"include": "#classType",
									"name": "entity.other.inherited-class.oops"
								}
							],
							"beginCaptures": {
								"1": {
									"name": "keyword.control.implements.oops"
								}
							}
						},
						{
							"begin": "{",
							"end": "(?=})",
							"name": "meta.class.oops.body",
							"patterns": [
								{
									"include": "#classes"
								},
								{
									"include": "#comments"
								},
								{
									"include": "#basicBlock"
								},
								{
									"include": "#methods"
								},
								{
									"include": "#classVariables"
								}
							]
						},
						{
							"match": "([a-zA-Z_][a-zA-Z0-9_]*)",
							"name": "entity.name.class.oops"
						}
					],
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.lookup.oops"
						},
						"2": {
							"name": "storage.type.class.oops"
						}
					}
				}
			]
		},
		"classVariables": {
			"begin": "(private|package|protected|public)\\s+(?:(static)\\s+)?(?:(final)\\s+)?",
			"end": ";",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.access.oops"
				},
				"2": {
					"name": "storage.modifier.lookup.oops"
				},
				"3": {
					"name": "storage.modifier.modifiable.oops"
				}
			},
			"patterns": [
				{
					"begin": "(.*?)\\s*=",
					"end": "(?=;)",
					"name": "meta.class.variable.oops",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"match": "(?:([a-zA-Z_].*>)(?:\\s*\\[])?\\s*|([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*\\[]|\\s)\\s*)([a-zA-Z_][a-zA-Z0-9_]*)",
									"captures": {
										"1": {
											"patterns": [
												{
													"include": "#reifiedType"
												}
											]
										},
										"2": {
											"patterns": [
												{
													"include": "#validType"
												}
											]
										},
										"3": {
											"name": "variable.name.oops"
										}
									}
								}
							]
						}
					},
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				{
					"match": "(?:([a-zA-Z_].*>)(?:\\s*\\[])?\\s*|([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*\\[]|\\s)\\s*)([a-zA-Z_][a-zA-Z0-9_]*)",
					"name": "meta.class.variable.oops",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#reifiedType"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#validType"
								}
							]
						},
						"3": {
							"name": "variable.name.oops"
						}
					}
				}
			]
		},
		"methods": {
			"patterns": [
				{
					"begin": "(private|package|protected|public)\\s+(?:(static|final)\\s+)?(def|set)(?:\\s+(native|intrinsic))?\\s+(.*?)\\s*\\(",
					"end": "\\)\\s*->\\s*(.*?)\\s*(?={|;)",
					"name": "meta.method.standards.oops",
					"patterns": [
						{
							"name": "meta.method.oops",
							"patterns": [
								{
									"include": "#argDecl"
								}
							]
						}
					],
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.access.oops"
						},
						"2": {
							"name": "storage.modifier.lookup.oops"
						},
						"3": {
							"name": "storage.type.function.oops"
						},
						"4": {
							"name": "storage.modifier.implementation.oops"
						},
						"5": {
							"patterns": [
								{
									"begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*<",
									"end": ">",
									"patterns": [
										{
											"include": "#typeDecl"
										}
									],
									"beginCaptures": {
										"1": {
											"name": "entity.name.function.oops"
										}
									}
								},
								{
									"match": "([a-zA-Z_][a-zA-Z0-9_]*)",
									"name": "entity.name.function.oops"
								}
							]
						}
					},
					"endCaptures": {
						"1": {
							"patterns": [
								{
									"match": "(?<=\\b)void(?=\\b)",
									"name": "storage.type.primitive.oops"
								},
								{
									"include": "#validType"
								}
							]
						}
					}
				},
				{
					"begin": "(private|package|protected|public)\\s+(?:(static|final)\\s+)?(?:(native|intrinsic)\\s+)?(constructor)\\s*(.*?)\\s*\\(",
					"end": "\\)\\s*(?={|;)",
					"patterns": [
						{
							"name": "meta.method.constructor.oops",
							"patterns": [
								{
									"include": "#argDecl"
								}
							]
						}
					],
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.access.oops"
						},
						"2": {
							"name": "storage.modifier.lookup.oops"
						},
						"3": {
							"name": "storage.type.function.oops"
						},
						"4": {
							"name": "storage.modifier.implementation.oops"
						},
						"5": {
							"patterns": [
								{
									"begin": "\\s*<",
									"end": ">",
									"patterns": [
										{
											"include": "#typeDecl"
										}
									]
								}
							]
						}
					}
				},
				{
					"begin": "(private|package|protected|public)\\s+(?:(final)\\s+)?(operator)(?:\\s+(native|intrinsic))?\\s*((?:>>>=)|(?:\\+\\+)|(?:\\?\\.)|(?:\\|\\|)|(?:\\+=)|(?:\\|=)|(?:<<=)|(?:>>=)|(?:>>>)|(?:\\^=)|(?:\\*=)|(?:\\.)|(?:\\+)|(?:&&)|(?:&=)|(?:\\|)|(?:<<)|(?:>>)|(?:\\^)|(?:->)|(?:--)|(?:\\/=)|(?:==)|(?:=>)|(?:>=)|(?:<=)|(?:%=)|(?:\\*)|(?:!=)|(?:::)|(?:-=)|(?:\\?)|(?:&)|(?:~)|(?::)|(?:,)|(?:\\/)|(?:=)|(?:>)|(?:<)|(?:!)|(?:%)|(?:-)|(?:\\(\\))|(?:\\[]))\\s*(.*?)\\s*\\(",
					"end": "\\)\\s*->\\s*(.*?)\\s*(?={|;)",
					"name": "meta.method.operator.oops",
					"patterns": [
						{
							"patterns": [
								{
									"include": "#argDecl"
								}
							]
						}
					],
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.access.oops"
						},
						"2": {
							"name": "storage.modifier.lookup.oops"
						},
						"3": {
							"name": "storage.type.function.oops"
						},
						"4": {
							"name": "storage.modifier.implementation.oops"
						},
						"5": {
							"name": "entity.name.function.oops"
						},
						"6": {
							"patterns": [
								{
									"begin": "<",
									"end": ">",
									"patterns": [
										{
											"include": "#typeDecl"
										}
									]
								}
							]
						}
					},
					"endCaptures": {
						"1": {
							"patterns": [
								{
									"match": "(?<=\\b)void(?=\\b)",
									"name": "storage.type.primitive.oops"
								},
								{
									"include": "#validType"
								}
							]
						}
					}
				},
				{
					"begin": "(private|package|protected|public)\\s+(?:(static|final)\\s+)?(get)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
					"end": "\\)\\s*->\\s*(.*?)\\s*(?={|;)",
					"name": "meta.method.get.oops",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.access.oops"
						},
						"2": {
							"name": "storage.modifier.lookup.oops"
						},
						"3": {
							"name": "storage.type.function.oops"
						},
						"4": {
							"name": "entity.name.function.oops"
						},
						"5": {
							"patterns": [
								{
									"match": "(?<=\\b)void(?=\\b)",
									"name": "storage.type.primitive.oops"
								},
								{
									"include": "#validType"
								}
							]
						}
					},
					"endCaptures": {
						"1": {
							"patterns": [
								{
									"match": "(?<=\\b)void(?=\\b)",
									"name": "storage.type.primitive.oops"
								},
								{
									"include": "#validType"
								}
							]
						}
					}
				}
			]
		},
		"argDecl": {
			"patterns": [
				{
					"begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*<",
					"end": ">\\s*(?:\\[]\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)",
					"name": "meta.argdecl.templated.oops",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#classType"
								}
							]
						}
					},
					"endCaptures": {
						"1": {
							"name": "variable.parameter.oops"
						}
					},
					"patterns": [
						{
							"include": "#validType"
						}
					]
				},
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?:\\[]|\\s)\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
					"name": "meta.argdecl.nontemplated.oops",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#validType"
								}
							]
						},
						"2": {
							"name": "variable.parameter.oops"
						}
					}
				},
				{
					"begin": "=",
					"end": "(?=,|\\))",
					"name": "meta.parameter.variable.default",
					"patterns": [
						{
							"include": "#parenthesized"
						},
						{
							"include": "#brackets"
						},
						{
							"include": "#basicBlock"
						},
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"basicBlock": {
			"begin": "{",
			"end": "}",
			"name": "meta.basic_block.oops",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#basicBlock"
				},
				{
					"include": "#parenthesized"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#declarations"
				},
				{
					"include": "#forloop"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"parenthesized": {
			"begin": "\\(",
			"end": "\\)",
			"name": "meta.parenthesized.oops",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#basicBlock"
				},
				{
					"include": "#parenthesized"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"brackets": {
			"begin": "\\[",
			"end": "]",
			"name": "meta.bracketed.oops",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#basicBlock"
				},
				{
					"include": "#parenthesized"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"access": {
			"patterns": [
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
					"name": "meta.access.oops",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#keywords"
								},
								{
									"include": "#patched"
								},
								{
									"match": ".*",
									"name": "entity.name.function.oops"
								}
							]
						}
					}
				},
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?!\\()",
					"name": "meta.access.oops",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#keywords"
								},
								{
									"include": "#patched"
								},
								{
									"match": ".*",
									"name": "variable.name.oops"
								}
							]
						}
					}
				}
			]
		},
		"newExpression": {
			"match": "(new)\\s+(.*?)\\s*(?=\\(|\\[)",
			"name": "meta.new_expression.oops",
			"captures": {
				"1": {
					"name": "keyword.operator.new.oops"
				},
				"2": {
					"patterns": [
						{
							"include": "#validType"
						}
					]
				}
			}
		},
		"castExpression": {
			"match": "->\\s*(.*?)\\s*(?=;|\\)|])",
			"name": "meta.cast.oops",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#validType"
						}
					]
				}
			}
		},
		"instanceofExpression": {
			"match": "(instanceof)\\s*(.*?)\\s*(?=;|\\)|])",
			"name": "meta.cast.oops",
			"captures": {
				"1": {
					"name": "keyword.control.instanceof.oops"
				},
				"2": {
					"patterns": [
						{
							"include": "#validType"
						}
					]
				}
			}
		},
		"forloop": {
			"begin": "(for)\\s*\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for.oops"
				}
			},
			"name": "meta.forloop.header",
			"patterns": [
				{
					"match": "(?<=\\()\\s*(.*):\\s*(.*)(?=\\))",
					"name": "meta.forloop.enhanced.header",
					"captures": {
						"1": {
							"patterns": [
								{
									"name": "meta.forloop.enhanced.basic",
									"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?:\\[]|\\s)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*",
									"captures": {
										"1": {
											"patterns": [
												{
													"include": "#validType"
												}
											]
										},
										"2": {
											"name": "variable.name"
										}
									}
								},
								{
									"name": "meta.forloop.enhanced.generic",
									"begin": "\\s*([a-zA-Z_][a-zA-Z0-9_]*)<",
									"end": ">(?:\\[]|\\s)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*",
									"patterns": [
										{
											"include": "#validType"
										}
									],
									"beginCaptures": {
										"1": {
											"patterns": [
												{
													"include": "#classType"
												}
											]
										}
									},
									"endCaptures": {
										"1": {
											"name": "variable.name"
										}
									}
								}
							]
						},
						"2": {
							"name": "meta.forloop.enhanced.iterable",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						}
					}
				},
				{
					"begin": "(?<=\\()",
					"end": "(?=;)",
					"name": "meta.forloop.declaration",
					"patterns": [
						{
							"include": "#declarations"
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"begin": ";",
					"end": ";",
					"name": "meta.forloop.conditional",
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				{
					"begin": "(?<=;)",
					"end": "(?=\\))",
					"name": "meta.forloop.increment",
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"expressions": {
			"name": "meta.expression.oops",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#chars"
				},
				{
					"include": "#storages"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#newExpression"
				},
				{
					"include": "#castExpression"
				},
				{
					"include": "#instanceofExpression"
				},
				{
					"include": "#access"
				},
				{
					"match": "((?:>>>=)|(?:\\+\\+)|(?:\\?\\.)|(?:\\|\\|)|(?:\\+=)|(?:\\|=)|(?:<<=)|(?:>>=)|(?:>>>)|(?:\\^=)|(?:\\*=)|(?:\\.)|(?:\\+)|(?:&&)|(?:&=)|(?:\\|)|(?:<<)|(?:>>)|(?:\\^)|(?:->)|(?:--)|(?:\\/=)|(?:==)|(?:=>)|(?:>=)|(?:<=)|(?:%=)|(?:\\*)|(?:!=)|(?:::)|(?:-=)|(?:\\?)|(?:&)|(?:~)|(?::)|(?:,)|(?:\\/)|(?:=)|(?:>)|(?:<)|(?:!)|(?:%)|(?:-))",
					"name": "keyword.operator.oops"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"match": "\\s*([a-zA-Z_][a-zA-Z0-9_]*)(?:\\[]|\\s)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?==)",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#validType"
								}
							]
						},
						"2": {
							"name": "variable.name"
						}
					}
				},
				{
					"begin": "\\s*([a-zA-Z_][a-zA-Z0-9_]*)<",
					"end": ">(?:\\[]|\\s)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?==)",
					"patterns": [
						{
							"include": "#validType"
						}
					],
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#classType"
								}
							]
						}
					},
					"endCaptures": {
						"1": {
							"name": "variable.name"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.oops"
}